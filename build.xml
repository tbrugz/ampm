<project name="mvnrun" basedir="." default="info"
	xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!-- xmlns:ivy="antlib:org.apache.ivy.ant" -->

	<property name="project.version" value="0.4-SNAPSHOT"/>
	<!--property name="config.file" value=".mvnrun.properties"/-->

	<!-- required by ant:if - https://ant.apache.org/manual/ifunless.html -->
	<property name="ant.version.required" value="1.9.1" />

	<echo message="${ant.project.name} - version ${project.version}"/>

	<!--<property file="${user.dir}/.mvnrun.properties"/> ?? -->
	<property file="${user.home}/.mvnrun.properties"/>

	<property environment="env"/>

	<property name="maven.user.dir" location="${user.home}/.m2"/>

	<property name="maven.repo.remote" value="http://central.maven.org/maven2"/>
	<!--
	http://central.maven.org/maven2 ; http://download.java.net/maven/2 (?)
	-->

	<!--
	<property name="groupId"/>
	<property name="artifactId"/>
	<property name="version"/>
	-->
	<property name="scope" value="runtime"/>
	<!-- <property name="run.mainclass"/> -->
	<!-- java.ext.dirs: extra jars - jdbc drivers, ... -->

	<property name="executables.dir" value="${user.home}${file.separator}bin"/>

	<!--
	see: http://mail-archives.apache.org/mod_mbox/ant-user/200812.mbox/%3C9EE86F1965E19E499C80DE52AC807B5502A477D1@z011021.bk.fin.local%3E
	-->
	<macrodef name="loadmf">
		<attribute name="jar" />
		<attribute name="prefix" default="" />
		<sequential>
			<loadproperties>
				<!-- Load the manifest entries -->
				<zipentry zipfile="@{jar}" name="META-INF/MANIFEST.MF" />
				<!-- Add the prefix -->
				<filterchain>
					<prefixlines prefix="@{prefix}" />
				</filterchain>
			</loadproperties>
		</sequential>
	</macrodef>

	<target name="info" depends="prepare" description="Shows basic environment info">
		<!--<echo message="ant.project.name: ${ant.project.name}" />
		<echo message="project.version: ${project.version}" />-->
		<echo message="ant.file: ${ant.file}" />
		<echo message="ant.version: ${ant.version}" />
		<echo message="ant.java.version: ${ant.java.version}" />

		<echo message="os.name/version/arch: ${os.name} / ${os.version} / ${os.arch}" />

		<echo message="maven.user.dir: ${maven.user.dir}" />
		<echo message="maven.repo.dir: ${maven.repo.dir}" />
		<echo message="maven.repo.remote: ${maven.repo.remote}"/>
		<echo message="executables.dir: ${executables.dir}"/>

		<!--echo message=""/>
		<echo message="for main targets, run `ant -projecthelp`"/-->
	</target>

	<target name="install-maven-ant-tasks" depends="prepare">
		<mkdir dir="${user.home}/.ant/lib"/>
		<get src="${maven.repo.remote}/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar"
			dest="${user.home}/.ant/lib" />
	</target>

	<target name="ant-version-check">
		<antversion property="ant.version.running" />
		<fail message="using ant version ${ant.version.running} - minimal suggested version is ${ant.version.required}">
			<condition>
				<not>
					<antversion atleast="${ant.version.required}" />
				</not>
			</condition>
		</fail>
	</target>

	<target name="prepare" depends="ant-version-check">
		<!-- setting 'maven.repo.dir' -->
		<property name="maven.user.settings.file" location="${maven.user.dir}/settings.xml"/>
		<property name="maven.global.settings.file" location="${maven.home}/conf/settings.xml"/>
		<xmlproperty file="${maven.user.settings.file}" prefix="mvnsettings" collapseAttributes="true"/>
		<xmlproperty file="${maven.global.settings.file}" prefix="mvnsettings" collapseAttributes="true"/>

		<!--<echo message="maven.home: ${maven.home}"/>
		<echoproperties prefix="mvnsettings"/>-->
		<property name="maven.repo.dir" location="${mvnsettings.settings.localRepository}" if:set="mvnsettings.settings.localRepository"/>
		<property name="maven.repo.dir" location="${maven.user.dir}/repository"/>
	</target>

	<target name="artifact-split" if="artifact">
		<!--<property name="artifact.partial.regex" value="(.*):(.*):"/>
		<property name="artifact.full.regex" value="(.*):(.*):(.*)"/>-->
		<loadresource property="groupId" unless:set="groupId">
			<propertyresource name="artifact"/>
			<filterchain>
				<tokenfilter>
					<filetokenizer/>
					<replaceregex pattern=":.*$" replace="" />
				</tokenfilter>
			</filterchain>
		</loadresource>

		<condition property="containsArtifact">
			<contains string="${artifact}" substring=":"/>
		</condition>

		<sequential if:set="containsArtifact">
			<loadresource property="artifactAndVersion" unless:set="artifactId">
				<propertyresource name="artifact"/>
				<filterchain>
					<tokenfilter>
						<filetokenizer/>
						<replaceregex pattern="^.*?:" replace="" />
					</tokenfilter>
				</filterchain>
			</loadresource>

			<condition property="containsVersion">
				<contains string="${artifactAndVersion}" substring=":"/>
			</condition>
			<property name="artifactId" value="${artifactAndVersion}" unless:set="containsVersion"/>
			<sequential if:set="containsVersion">
				<loadresource property="artifactId">
					<propertyresource name="artifactAndVersion"/>
					<filterchain>
						<tokenfilter>
							<filetokenizer/>
							<replaceregex pattern=":.*$" replace="" />
						</tokenfilter>
					</filterchain>
				</loadresource>
				<loadresource property="version">
					<propertyresource name="artifactAndVersion"/>
					<filterchain>
						<tokenfilter>
							<filetokenizer/>
							<replaceregex pattern="^.*?:" replace="" />
						</tokenfilter>
					</filterchain>
				</loadresource>
			</sequential>

		</sequential>

		<echo message="groupId: ${groupId} ; artifactId: ${artifactId} ; version: ${version}"/>
		<!--<echo message="groupId: ${groupId} ; artifactId: ${artifactId} ; version: ${version} ; artifactAndVersion: ${artifactAndVersion} - artifact: ${artifact}"/>-->
	</target>

	<target name="artifact-deps" depends="prepare, artifact-split">
		<fail message="param 'groupId' undefined" unless="groupId" />
		<fail message="param 'artifactId' undefined" unless="artifactId"/>
		<!--
		option to use 'artifact'?
		http://maven.apache.org/plugins/maven-dependency-plugin/get-mojo.html
		-->
	</target>

	<target name="artifact-with-version-deps" depends="artifact-deps, get-artifact-latest-version-if-no-version">
		<sequential if:set="useLatestVersion">
			<property name="version" value="${artifact.latestVersion}" if:set="artifact.latestVersion" />
		</sequential>
		<fail message="param 'version' undefined (for latest version, set 'useLatestVersion')" unless="version"/>
	</target>

	<target name="install-deps" depends="artifact-with-version-deps">
		<fail message="param 'scope' undefined" unless="scope"/>

		<!-- see: https://ant.apache.org/manual/Tasks/conditions.html -->
		<condition property="has.maven-ant-tasks">
			<typefound uri="antlib:org.apache.maven.artifact.ant" name="dependencies"/>
		</condition>

		<!--<echo>has.maven-ant-tasks: ${has.maven-ant-tasks}</echo>-->
		<fail message="'maven-ant-tasks' library not found. Please install using `ant install-maven-ant-tasks`" unless="has.maven-ant-tasks"/>

		<artifact:dependencies pathId="deps.path">
			<dependency groupId="${groupId}" artifactId="${artifactId}" version="${version}" scope="${scope}"/>
		</artifact:dependencies>

		<path id="exec.path">
			<path refid="deps.path"/>
			<pathelement path="${classpath}" if:set="classpath"/>
		</path>

		<!-- http://stackoverflow.com/questions/2430445/is-it-possible-to-have-ant-print-out-the-classpath-for-a-particular-target-if-s -->
		<pathconvert property="exec.path.prop" refid="exec.path"/>
	</target>

	<target name="run-deps" depends="install-deps, set-groupId-path">
		<property name="mainjar" location="${maven.repo.dir}/${groupId.path}/${artifactId}/${version}/${artifactId}-${version}.jar" />
		<sequential unless:set="mainclass">
			<loadmf jar="${mainjar}" prefix="manifest."/>
			<!--<echoproperties prefix="manifest."/>-->
			<sequential if:set="manifest.Main-Class">
				<echo message="setting 'mainclass' from manifest info: Main-Class=${manifest.Main-Class}"/>
				<property name="mainclass" value="${manifest.Main-Class}"/>
			</sequential>
		</sequential>

		<fail message="param 'mainclass' undefined (and not found in MANIFEST.MF)" unless="mainclass"/>
	</target>

	<target name="run" depends="exit-if-not-installed, run-deps" description="Executes the mainclass of an application">
		<echo message="path: ${exec.path.prop}"/>
		<!-- TODO: option of no ant "debug info" - not good for cli apps -->
		<!-- TODO: extract mainclass from jar -->

		<!-- java -Djava.ext.dirs="$M2_REPO"/sqlline/sqlline/1.1.9:"$M2_REPO"/jline/jline/2.10:/home/tbrugz/Desktop/java/jars-etc/libs-jdbc sqlline.SqlLine -->
		<!-- mvnrun$ ant -DgroupId=sqlline -DartifactId=sqlline -Dversion=1.1.9 -Dmainclass=sqlline.SqlLine run -->
		<!-- java -Djava.ext.dirs=$BINPATH sqlline.SqlLine "$@" -->
		<!--<echo message="classpath: ${classpath}"/>-->
		<java classpathref="exec.path" classname="${mainclass}" fork="true">
			<arg line="${args}" if:set="args"/>
		</java>
	</target>

	<target name="set-groupId-path" depends="artifact-deps">
		<loadresource property="groupId.path">
			<propertyresource name="groupId" />
			<filterchain>
				<tokenfilter>
					<filetokenizer />
					<replacestring from="." to="/" />
				</tokenfilter>
			</filterchain>
		</loadresource>
	</target>

	<target name="is-installed" depends="set-groupId-path, artifact-with-version-deps" description="Tests if artifact is installed">
		<!-- http://stackoverflow.com/questions/1176071/replacing-characters-in-ant-property -->

		<!--property name="testdir" location="${maven.repo.dir}/${groupId.path}/${artifactId}/${version}" />
		<echo message="testdir: ${testdir}"/>
		<available file="${testdir}" type="dir" property="is.installed"/-->

		<!-- XXX: should test for '.pom'? -->
		<property name="testfile" location="${maven.repo.dir}/${groupId.path}/${artifactId}/${version}/${artifactId}-${version}.jar" />
		<echo message="testfile: ${testfile}"/>
		<available file="${testfile}" type="file" property="is.installed"/>

		<!--property name="is.installed" value="false"/-->
		<!--echo message="installed: ${is.installed}" if:set="is.installed"/-->
		<echo message="installed: true" if:set="is.installed"/>
		<echo message="installed: false" unless:set="is.installed"/>
	</target>

	<target name="exit-if-not-installed" depends="is-installed">
		<fail message="artifact ${groupId}:${artifactId}:${version} not installed" unless="is.installed"/>
	</target>

	<target name="install" depends="install-deps" description="Installs (downloads into local repo) the artifact">
		<artifact:mvn>
			<arg value="org.apache.maven.plugins:maven-dependency-plugin:2.1:get"/>
			<!-- <arg value="dependency:get"/> -->
			<arg value="-Dartifact=${groupId}:${artifactId}:${version}"/>
			<arg value="-DrepoUrl=${maven.repo.dir}"/>
			<arg value="-Dtransitive=true"/>
		</artifact:mvn>
	</target>

	<target name="uninstall" depends="set-groupId-path, artifact-with-version-deps" description="Uninstalls an artifact (not its dependencies)">
		<property name="artifact.dir" location="${maven.repo.dir}/${groupId.path}/${artifactId}/${version}" />

		<echo message="artifact.dir: ${artifact.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="${artifact.dir}"/>
		</delete>
	</target>

	<target name="make-exec" depends="run-deps" description="Creates an executable script">

		<condition property="on.windows">
			<os family="windows"/>
		</condition>

		<!-- exec.variant -->
		<sequential if:set="exec.variant">
			<echo message="exec.variant: ${exec.variant}"/>
			<property name="exec.variant.full" value=".${exec.variant}"/>
		</sequential>
		<property name="exec.variant.full" value=""/>

		<property name="base.script.file" value="${groupId}.${artifactId}.${version}${exec.variant.full}"/>

		<!-- XXX: add '${args}' to executable? -->
		<sequential unless:set="on.windows">
			<property name="full.script.file" value="${executables.dir}/${base.script.file}.sh"/>

			<echo file="${full.script.file}">java -cp ${exec.path.prop} ${mainclass} "$@"</echo>
			<chmod file="${full.script.file}" perm="+x"/>
		</sequential>

		<sequential if:set="on.windows">
			<property name="full.script.file" value="${executables.dir}/${base.script.file}.bat"/>

			<echo file="${full.script.file}">java -cp ${exec.path.prop} ${mainclass} %*</echo>
		</sequential>

		<echo message="executable written to: ${full.script.file}"/>
	</target>

	<target name="check-latest-version" depends="get-artifact-latest-version" description="Checks artifact's latest version in Maven Central">
		<echo message="artifact.latestVersion: ${artifact.latestVersion}"/>
		<echo message="artifact.lastUpdated: ${artifact.lastUpdated}"/>
	</target>

	<target name="get-artifact-latest-version-if-no-version" depends="get-artifact-latest-version" unless="version">
	</target>

	<target name="get-artifact-latest-version" depends="set-groupId-path">
		<property name="artifact.url.check" value="${maven.repo.remote}/${groupId.path}/${artifactId}/maven-metadata.xml"/>
		<echo message="artifact.url.check: ${artifact.url.check}" />
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmssSSS"/>
		</tstamp>

		<tempfile property="artifact.url.resp.file" destdir="${java.io.tmpdir}" prefix="${ant.project.name}" suffix=".xml" deleteonexit="true"/>
		<get src="${artifact.url.check}" dest="${artifact.url.resp.file}"/>

		<xmlproperty file="${artifact.url.resp.file}" prefix="mvnmeta" collapseAttributes="true"/>
		<!--
		<echoproperties prefix="mvnmeta"/>
		mvnmeta.metadata.versioning.lastUpdated
		mvnmeta.metadata.versioning.latest
		mvnmeta.metadata.versioning.release
		-->
		<property name="artifact.latestVersion" value="${mvnmeta.metadata.versioning.latest}" />
		<property name="artifact.lastUpdated" value="${mvnmeta.metadata.versioning.lastUpdated}" />
	</target>

	<target name="list-something" depends="prepare, artifact-split">
		<property name="list.maxVersionsToShow" value="4"/>
		<script language="javascript">
			<![CDATA[
			var File = java.io.File;

			// http://stackoverflow.com/questions/2686855/is-there-a-javascript-function-that-can-pad-a-string-to-get-to-a-determined-leng
			function pad(pad, str, padLeft) {
				if (typeof str === 'undefined')
					return pad;
				if (padLeft) {
					return (pad + str).slice(-pad.length);
				} else {
					return (str + pad).substring(0, pad.length);
				}
			}

			// http://stackoverflow.com/a/16187766/616413
			function cmpVersions(a, b) {
				var i, diff;
				var regExStrip0 = /(\.0+)+$/;
				var segmentsA = a.replace(regExStrip0, '').split('.');
				var segmentsB = b.replace(regExStrip0, '').split('.');
				var l = Math.min(segmentsA.length, segmentsB.length);

				for (i = 0; i < l; i++) {
					diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
					if (diff) {
						return diff;
					}
				}
				return segmentsA.length - segmentsB.length;
			}

			var fs = project.createDataType("fileset");
			var dir = project.getProperty("maven.repo.dir");
			var doListOrg = project.getProperty("list.listOrganizations")!=null;
			var doListArt = project.getProperty("list.listArtifacts")!=null;

			//print("targets: ", targets, " ; listOrg: ", doListOrg, " ; listArt: ", doListArt);

			var groupId = project.getProperty("groupId");
			var artifactId = project.getProperty("artifactId");

			var maxVersionsToShow = parseInt(project.getProperty("list.maxVersionsToShow"));
			var listUsePattern = project.getProperty("list.usePattern");

			fs.setDir( new File( dir ) );
			var includes = "";
			if(groupId) {
				includes += groupId.replace(/\./g, "/") + "/"
			}
			if(artifactId) {
				includes += (listUsePattern ? "**/" : "" ) + artifactId + "/"
			}
			includes += "**/*.pom";
			if(groupId) {
				print("includes filter: ", includes, "\n");
			}
			fs.setIncludes( includes );

			// organizations
			var orgs = {};
			var orgsArt = {};

			//artifacts
			var arts = {};
			var artsVersions = {};

			var maxOrgLen = "<< organization >>".length+1;
			var maxArtLen = "<< artifact >>".length+1;
			var maxArtVersionsLen = 1;
			var maxArtVersionLen = 1;

			// create echo Task via Ant API
			//var echo = project.createTask("echo");

			// iterate over files found.
			var srcFiles = fs.getDirectoryScanner( project ).getIncludedFiles( );
			for ( i = 0; i < srcFiles.length; i++ ) {
				var filename = srcFiles[i];
				var parts = filename.split("/");
				var org = parts.slice(0, parts.length-3);
				var orgstr = org.join(".");
				var art = parts[parts.length-3];
				var artstr = orgstr+":"+art;
				var artVersion = parts[parts.length-2];

				//print("orgstr: ", orgstr, "; art: ", art, "; artVersion: ", artVersion);

				if(orgs[orgstr]!=null) {
					orgs[orgstr]++
				}
				else {
					orgs[orgstr] = 1;
					if(maxOrgLen<orgstr.length) {
						maxOrgLen = orgstr.length+1;
					}
				}

				if(arts[artstr]!=null) {
					arts[artstr]++
				}
				else {
					arts[artstr] = 1;
					artsVersions[artstr] = [];
					if(maxArtLen<artstr.length) {
						maxArtLen = artstr.length+1;
					}

					if(orgsArt[orgstr]!=null) {
						orgsArt[orgstr]++
					}
					else {
						orgsArt[orgstr] = 1;
					}
				}
				artsVersions[artstr].push(artVersion);
				//maxArtVersionsLen = Math.max(maxArtVersionsLen, artsVersions[artstr].join(",").length+1);
				maxArtVersionLen = Math.max(maxArtVersionLen, artVersion.length+1);

				//print(parts.length, " - ", parts);

				// use echo Task via Ant API
				//echo.setMessage( filename );
				//echo.perform( );
			}

			if(doListOrg) {
				//print(">>>>> organizations: # of artifacts ; # of artifacts x versions");
				var okeys = Object.keys(orgs);
				if(okeys.length>0) {
					var pad1 = Array(maxOrgLen).join(' ');
					var pad2 = Array("#artifacts".length).join(' ');
					var pad3 = Array("#artfcts-x-vrs".length).join(' ');
					print( pad(pad1, "<< organization >>") + "  #artifacts   #artfcts-x-vrs");

					for ( i = 0; i < okeys.length; i++ ) {
						print( pad(pad1, okeys[i]) +"   "+pad(pad2, orgsArt[okeys[i]], true)+"    "+pad(pad3, orgs[okeys[i]], true) );
					}
				}
				print( "\n# of organizations found = "+okeys.length);
			}

			if(doListArt) {
				var akeys = Object.keys(arts);
				var versionsSum = 0;
				if(akeys.length>0) {
					var artsVersionsStr = {};
					for ( i = 0; i < akeys.length; i++ ) {
						var vers = artsVersions[akeys[i]].sort(cmpVersions);
						var str = "";
						var len = 1
						if(vers.length > maxVersionsToShow) {
							str = vers[0] + ",...," + vers.slice(vers.length-maxVersionsToShow+1).join(",");
						}
						else {
							str = vers.join(",");
						}
						artsVersionsStr[akeys[i]] = str;
						len = str.length + 1;
						maxArtVersionsLen = Math.max(maxArtVersionsLen, len);
						versionsSum += vers.length;
					}

					var pad1 = Array(maxArtLen).join(' ');
					var pad2 = Array("#versions".length+3).join(' ');
					var pad3 = Array(Math.max("last-version".length, maxArtVersionLen)+3).join(' ');
					var pad4 = Array(Math.max("versions".length, maxArtVersionsLen)+2).join(' ');

					print( pad(pad1, "<< artifact >>") + pad(pad2, "#versions", true) + pad(pad3, "last-version", true) + pad(pad4, "versions", true) );
					for ( i = 0; i < akeys.length; i++ ) {
						var max = artsVersions[akeys[i]][arts[akeys[i]]-1];
						print( pad(pad1, akeys[i]) + pad(pad2, artsVersions[akeys[i]].length, true) + pad(pad3, max, true) + pad(pad4, artsVersionsStr[akeys[i]], true) );
					}
				}
				print( "\n# of artifacts found = " + akeys.length + "  [#artifacts x versions = " + versionsSum + "]");
			}
			]]>
		</script>
	</target>

	<target name="set-list-list-orgs">
		<property name="list.listOrganizations" value="true" />
	</target>

	<target name="set-list-list-artifacts">
		<property name="list.listArtifacts" value="true" />
	</target>

	<target name="set-list-use-pattern">
		<property name="list.usePattern" value="true" />
	</target>

	<target name="list-organizations" depends="set-list-use-pattern, set-list-list-orgs, list-something" description="List organizations with artifacts in the local repo">
	</target>

	<target name="list" depends="set-list-use-pattern, set-list-list-artifacts, list-something" description="List artifacts in the local repo">
	</target>

	<target name="show" depends="artifact-with-version-deps, set-list-list-artifacts, list-something" description="Show artifact info">
		<property name="artifact.pom.path" location="${maven.repo.dir}/${groupId.path}/${artifactId}/${version}/${artifactId}-${version}.pom" />
		<available file="${artifact.pom.path}" type="file" property="pom.is.installed"/>
		<echo message="artifact.version: ${version}" if:set="version"/>
		<echo message="artifact.pom.path: ${artifact.pom.path}" if:set="version"/>
		<echo message="[remote] artifact.latestVersion: ${artifact.latestVersion}"/>
		<echo message="[remote] artifact.lastUpdated: ${artifact.lastUpdated}"/>
		<!--<sequential if:set="useLatestVersion">
			<property name="version" value="${artifact.latestVersion}" if:set="artifact.latestVersion" />
		</sequential>-->

		<echo message="no version defined (use 'version' param)" unless:set="version"/>

		<!--<property name="pom.is.installed" value="false" />
		<echo message="installed: ${pom.is.installed}"/>-->

		<sequential if:set="pom.is.installed">
			<xmlproperty file="${artifact.pom.path}" prefix="pom" collapseAttributes="true"/>
			<echo message="project.name: ${pom.project.name}"/>
			<echo message="project.description: ${pom.project.description}"/>
			<echo message="project.url: ${pom.project.url}"/>
		</sequential>

		<echo message="artifact not installed/found" unless:set="pom.is.installed"/>

		<!-- http://maven.apache.org/ant-tasks/examples/dependencies.html -->
		<!--<artifact:dependencies filesetId="pom.deps.fileset" type="jar">
			<pom file="${artifact.pom.path}"/>
		</artifact:dependencies>-->
		<!-- http://maven.apache.org/plugins/maven-dependency-plugin/tree-mojo.html -->
		<!--<echoproperties prefix="pom"/>-->
	</target>

</project>
